{"version":3,"sources":["img/burger.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","state","quant","dishes","id","name","price","orders","totalPrice","AddDish","e","preventDefault","dish","Math","random","target","value","_this","push","setState","AddOrder","findItem","i","length","Object","objectSpread","addQuantity","order","_this$state","indexOf","_this2","this","_this$state2","map","v","reduce","sum","cv","react_default","a","createElement","className","onSubmit","type","placeholder","key","src","require","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed3948f8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/burger.fd01b5c4.jpg\";","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    quant: {},\n    dishes: [\n      { id: 0.6537933286474382, name: \"checken burger\", price: 22 },\n      { id: 0.6537938286474382, name: \"frid potato\", price: 2 }\n    ],\n    orders: [],\n    totalPrice: 0\n  };\n\n  AddDish = e => {\n    e.preventDefault();\n\n    let dish = {};\n    dish.id = Math.random();\n    dish.name = e.target.name.value;\n    dish.price = +e.target.price.value;\n    let { dishes } = this.state;\n    dishes.push(dish);\n    this.setState({ dishes });\n  };\n  AddOrder = dish => {\n    let { orders } = this.state;\n    let findItem = false;\n    for (let i = 0; i < orders.length; i++) {\n      if (orders[i][\"name\"] === dish.name) findItem = true;\n    }\n\n    if (!findItem) orders.push({ ...dish, quant: 1 });\n    this.setState({ orders });\n  };\n\n  addQuantity = (e, order) => {\n    e.preventDefault();\n    const { orders, dishes } = this.state;\n\n    if (e.target.quant.value !== \"\")\n      for (let i = 0; i < dishes.length; i++) {\n        if (dishes[i].name === order.name) {\n          orders[orders.indexOf(order)].price =\n            dishes[i].price * +e.target.quant.value;\n          orders[orders.indexOf(order)].quant = +e.target.quant.value;\n        }\n      }\n\n    this.setState({ orders });\n  };\n\n  render() {\n    let { totalPrice, orders } = this.state;\n    const or = orders.map(v => v.price);\n    totalPrice = or.reduce((sum, cv) => sum + cv, 0);\n\n    return (\n      <div className=\"main container-fluid\">\n        <div className=\"header container-fluid\">\n          <ul>\n            <li>\n              <a>HOME</a>\n            </li>\n            <li>\n              <a>ORDER PAGE</a>\n            </li>\n            <li>\n              <a>LOGIN</a>\n            </li>\n          </ul>\n          <h1>Welcome to chello restaurant</h1>\n        </div>\n        <div className=\"addDish\">\n          <h1>Add Dish</h1>\n          <form\n            className=\"form\"\n            onSubmit={this.AddDish}\n          >\n            <input name=\"name\" type=\"text\" placeholder=\"name\" />\n            <input name=\"price\" type=\"text\" placeholder=\"price\" />\n\n            <button type=\"submit\">Submit</button>\n          </form>\n        </div>\n        <div className=\"orderMenuPrice\">\n          <div className=\"Menu\">\n            <h1>Menu </h1>\n            {this.state.dishes.map(dish => (\n              <div key={dish.id}>\n                <h3>{dish.name}</h3>\n                <div className=\"image\">\n                <img src={require(\"./img/burger.jpg\")} />\n\n                </div>\n                <button onClick={() => this.AddOrder(dish)}>\n                  Add to order\n                </button>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"orders\">\n            <h1>Orders List</h1>\n            {this.state.orders.map((order, key) => (\n              <div key={key}>\n                <h3>{order.name}</h3>\n                \n                <form onSubmit={e => this.addQuantity(e, order)}>\n                  <input name=\"quant\" type=\"text\" placeholder=\"quantity\" />\n                  <button type=\"submit\">Submit</button>\n                </form>\n              </div>\n            ))}\n          </div>\n          <div className=\"totalPrice\">\n            <h1>Total Price</h1>\n            {this.state.orders.map((order, key) => (\n              <div className=\"order\" key={key}>\n                <h3>Name : {order.name}</h3>\n                <h3>Quantity : {order.quant}</h3>\n                <h3>Price : {order.price}</h3>\n              </div>\n            ))}\n            <h3>{totalPrice}</h3>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}